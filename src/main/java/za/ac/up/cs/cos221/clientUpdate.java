/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package za.ac.up.cs.cos221;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author Ryan
 */
public class clientUpdate extends javax.swing.JFrame {

    main parentForm;
    String name;
    String surname;
    String email;
    String address;
    String address2;
    String district;
    String city;
    String post;
    String phone;
    String store;
    String active;
    
    /**
     * Creates new form clientUpdate
     */
    public clientUpdate(main parent, JTable table) {
        parentForm = parent;
        
        int index = table.getSelectedRow();
        name = (String)table.getValueAt(index, 0);
        surname = (String)table.getValueAt(index, 1);
        
        if ((String)table.getValueAt(index, 2) == null)
            email = "";
        else
            email = (String)table.getValueAt(index, 2);
        
        address = (String)table.getValueAt(index, 3);
        
        if ((String)table.getValueAt(index, 4) == null)
            address2 = "";
        else
            address2 = (String)table.getValueAt(index, 4);
        
        district = (String)table.getValueAt(index, 5);
        city = (String)table.getValueAt(index, 6);
        
        if ((String)table.getValueAt(index, 7) == null)
            post = "";
        else
            post = (String)table.getValueAt(index, 7);
        
        phone = (String)table.getValueAt(index, 8);
        store = (String)table.getValueAt(index, 9);
        active = (String)table.getValueAt(index, 10);
        
        initComponents();
        
        this.setResizable(false);
        
        jtfName.setText(name);
        jtfSurname.setText(surname);
        jtfEmail.setText(email);
        jtfAddress.setText(address);
        jtfAddress2.setText(address2);
        jtfDistrict.setText(district);
        jtfPost.setText(post);
        jtfPhone.setText(phone);
        jcbxStore.setSelectedItem(store);
        jcbxCity.setSelectedItem(city);
        jcbxActive.setSelectedItem(active);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlblName = new javax.swing.JLabel();
        jtfName = new javax.swing.JTextField();
        jlblSurname = new javax.swing.JLabel();
        jtfSurname = new javax.swing.JTextField();
        jlblEmail = new javax.swing.JLabel();
        jtfEmail = new javax.swing.JTextField();
        jlblAddress = new javax.swing.JLabel();
        jtfAddress = new javax.swing.JTextField();
        jlblAddress2 = new javax.swing.JLabel();
        jtfAddress2 = new javax.swing.JTextField();
        jlblDistrict = new javax.swing.JLabel();
        jtfDistrict = new javax.swing.JTextField();
        jlblCity = new javax.swing.JLabel();
        jcbxCity = new javax.swing.JComboBox<>();
        jlblPost = new javax.swing.JLabel();
        jtfPost = new javax.swing.JTextField();
        jlblPhone = new javax.swing.JLabel();
        jtfPhone = new javax.swing.JTextField();
        jlblStore = new javax.swing.JLabel();
        jcbxStore = new javax.swing.JComboBox<>();
        jbtUpdate = new javax.swing.JButton();
        jlblTitle = new javax.swing.JLabel();
        jlblActive = new javax.swing.JLabel();
        jcbxActive = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setType(java.awt.Window.Type.POPUP);

        jlblName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlblName.setText("First Name:");

        jlblSurname.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlblSurname.setText("Last Name:");

        jlblEmail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlblEmail.setText("Email:");

        jlblAddress.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlblAddress.setText("Address:");

        jlblAddress2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlblAddress2.setText("Address 2:");

        jlblDistrict.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlblDistrict.setText("District:");

        jlblCity.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlblCity.setText("City:");

        jcbxCity.setModel(populateCities());

        jlblPost.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlblPost.setText("Postal Code:");

        jlblPhone.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlblPhone.setText("Phone:");

        jlblStore.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlblStore.setText("Store:");

        jcbxStore.setModel(populateStores());

        jbtUpdate.setText("Update Client Information");
        jbtUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtUpdateActionPerformed(evt);
            }
        });

        jlblTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jlblTitle.setText("Edit Client");

        jlblActive.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlblActive.setText("Active:");

        jcbxActive.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "True", "False" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(155, Short.MAX_VALUE)
                        .addComponent(jtfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jlblName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jtfName, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlblAddress2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jtfAddress2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlblSurname)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jtfSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlblAddress)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jtfAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlblDistrict)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jtfDistrict, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlblPost)
                                    .addComponent(jlblEmail)
                                    .addComponent(jlblCity)
                                    .addComponent(jlblPhone)
                                    .addComponent(jlblStore)
                                    .addComponent(jlblActive))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jcbxActive, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jcbxStore, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jtfPhone)
                                    .addComponent(jtfPost, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                                    .addComponent(jcbxCity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addGap(48, 48, 48))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(jlblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(jbtUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jlblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblName)
                    .addComponent(jtfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblSurname)
                    .addComponent(jtfSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblEmail)
                    .addComponent(jtfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblAddress)
                    .addComponent(jtfAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblAddress2)
                    .addComponent(jtfAddress2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblDistrict)
                    .addComponent(jtfDistrict, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblCity)
                    .addComponent(jcbxCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblPost)
                    .addComponent(jtfPost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblPhone)
                    .addComponent(jtfPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblStore)
                    .addComponent(jcbxStore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblActive)
                    .addComponent(jcbxActive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jbtUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtUpdateActionPerformed
        // TODO add your handling code here:
        String newName = jtfName.getText();
        String newSurname = jtfSurname.getText();
        String newEmail = jtfEmail.getText();
        String newAddress = jtfAddress.getText();
        String newAddress2 = jtfAddress2.getText();
        String newDistrict = jtfDistrict.getText();
        String newCity = (String)jcbxCity.getSelectedItem();
        String newPost = jtfPost.getText();
        String newPhone = jtfPhone.getText();
        String newStore = (String)jcbxStore.getSelectedItem();
        String newActive = (String)jcbxActive.getSelectedItem();
        
        int input = JOptionPane.showConfirmDialog(this, "You sure you want to update customer:\n" + 
                                                        "First Name: " + name + "\n" +
                                                        "Last Name: " + surname + "\n" +
                                                        "Email: " + email + "\n" +
                                                        "Address: " + address + "\n" +
                                                        "Address 2: " + address2 + "\n" +
                                                        "Distinct: " + district + "\n" +
                                                        "City: " + city + "\n" +
                                                        "Postal Code: " + post + "\n" +
                                                        "Phone: " + phone + "\n" +
                                                        "Store Name: " + store + "\n" +
                                                        "Active: " + active + "\n\n" +
                                                        "Who will have be updated to the following information:\n" +
                                                        "First Name: " + newName + "\n" +
                                                        "Last Name: " + newSurname + "\n" +
                                                        "Email: " + newEmail + "\n" +
                                                        "Address: " + newAddress + "\n" +
                                                        "Address 2: " + newAddress2 + "\n" +
                                                        "Distinct: " + newDistrict + "\n" +
                                                        "City: " + newCity + "\n" +
                                                        "Postal Code: " + newPost + "\n" +
                                                        "Phone: " + newPhone + "\n" +
                                                        "Store Name: " + newStore + "\n" +
                                                        "Active: " + newActive);
            
        if (input == 0)
        {
            boolean updated = false;

            String sql = "UPDATE address " +
                         "SET";

            if (newAddress.equals(address) == false)
            {
                sql += " address = '" + newAddress + "'";
            }

            if (newAddress2.equals(address2) == false)
            {
                if (newAddress2.length() == 0)
                    newAddress2 = "NULL";
                else
                    newAddress2 = "'" + newAddress2 + "'";

                if (sql.equals("UPDATE address " + "SET"))
                    sql += " address2 = " + newAddress2;
                else
                    sql += ", address2 = " + newAddress2;
            }

            if (newDistrict.equals(district) == false)
            {
                if (sql.equals("UPDATE address " + "SET"))
                    sql += " district = '" + newDistrict + "'";
                else
                    sql += ", district = '" + newDistrict + "'";
            }

            if (newCity.equals(city) == false)
            {
                String citySQL = "(SELECT city_id " +
                                 "FROM city " +
                                 "WHERE city = '" + newCity + "')";

                if (sql.equals("UPDATE address " + "SET"))
                    sql += " city_id = " + citySQL;
                else
                    sql += ", city_id = " + citySQL;
            }

            if (newPost.equals(post) == false)
            {
                if (newPost.length() == 0)
                    newPost = "NULL";
                else
                    newPost = "'" + newPost + "'";

                if (sql.equals("UPDATE address " + "SET"))
                    sql += " postal_code = " + newPost;
                else
                    sql += ", postal_code = " + newPost;
            }

            if (newPhone.equals(phone) == false)
            {
                if (sql.equals("UPDATE address " + "SET"))
                    sql += " phone = '" + newPhone + "'";
                else
                    sql += ", phone = '" + newPhone + "'";
            }

            Database instance = Database.instance();

            if (sql.equals("UPDATE address " + "SET") == false)
            {
                if (address2.length() == 0)
                    address2 = "IS NULL OR address2 = ''";
                else
                    address2 = " = '" + address2 + "'";

                if (post.length() == 0)
                    post = "IS NULL OR postal_code = ''";
                else
                    post = " = '" + post + "'";

                String citySQL = "(SELECT city_id " +
                             "FROM city " +
                             "WHERE city = '" + city + "')";

                String addressSQL = "(SELECT address_id " +
                                    "FROM address " +
                                    "WHERE address = '" + address + "' AND address2 " + address2 +
                                    " AND district = '" + district + "' AND city_id = " + citySQL + 
                                    " AND postal_code " + post + " AND phone = '" + phone + "')";

                sql += " WHERE address_id = " + addressSQL;

                System.out.println(sql);
                instance.execSQL(sql);
                updated = true;
            }

            sql = "UPDATE customer " +
                  "SET";

            if (newName.equals(name) == false)
            {
                sql += " first_name = '" + newName + "'";
            }

            if (newSurname.equals(surname) == false)
            {
                if (sql.equals("UPDATE customer " + "SET"))
                    sql += " last_name = '" + newSurname + "'";
                else
                    sql += ", last_name = '" + newSurname + "'";
            }

            if (newEmail.equals(email) == false)
            {
                if (newEmail.length() == 0)
                    newEmail = "NULL";
                else
                    newEmail = "'" + newEmail + "'";

                if (sql.equals("UPDATE customer " + "SET"))
                    sql += " email = " + newEmail;
                else
                    sql += ", email = " + newEmail;
            }

            if (newStore.equals(store) == false)
            {
                if (sql.equals("UPDATE customer " + "SET"))
                    sql += " store_id = " + newStore;
                else
                    sql += ", store_id = " + newStore;
            }

            if (newActive.equals(active) == false)
            {
                String activeSQL;
                if (newActive.equals("True"))
                    activeSQL = "1";
                else
                    activeSQL = "0";

                if (sql.equals("UPDATE customer " + "SET"))
                    sql += " active = " + activeSQL;
                else
                    sql += ", active = " + activeSQL;
            }

            if (sql.equals("UPDATE customer " + "SET") == false)
            {
                String address2SQL, postSQL;
                if (newAddress2.length() == 0 || newAddress2.equals("NULL"))
                    address2SQL = "IS NULL OR address2 = ''";
                else
                {
                    if (updated)
                        address2SQL = " = " + newAddress2;
                    else
                        address2SQL = " = '" + newAddress2 + "'";
                }
                
                if (newPost.length() == 0)
                    postSQL = "IS NULL OR postal_code = ''";
                else
                {
                    if (updated)
                        postSQL = " = " + newPost;
                    else
                        postSQL = " = '" + newPost + "'";
                }
                
                if (email.length() == 0)
                    email = " IS NULL";
                else
                    email = " = '" + email + "'";

                String citySQL = "(SELECT city_id " +
                             "FROM city " +
                             "WHERE city = '" + newCity + "')";

                String addressSQL = "(SELECT address_id " +
                                    "FROM address " +
                                    "WHERE address = '" + newAddress + "' AND address2 " + address2SQL +
                                    " AND district = '" + newDistrict + "' AND city_id = " + citySQL + 
                                    " AND postal_code " + postSQL + " AND phone = '" + newPhone + "')";

                String activeSQL;
                if (active.equals("True"))
                    activeSQL = "1";
                else
                    activeSQL = "0";
                
                String customerSQL = "(SELECT customer_id " + 
                                     "FROM customer " +
                                     "WHERE first_name = '" + name + "' AND last_name = '" + surname + 
                                     "' AND email " + email + " AND address_id = " + addressSQL + 
                                     " AND active = " + activeSQL + " AND store_id = " + store + ")";

                sql += " WHERE customer_id = " + customerSQL;

                System.out.println(sql);
                instance.execSQL(sql);
                updated = true;
            }

            if (updated)
            {
                parentForm.refreshClients();
                JOptionPane.showMessageDialog(this, "Client updated successfully.");

                name = jtfName.getText();
                surname = jtfSurname.getText();
                email = jtfEmail.getText();
                address = jtfAddress.getText();
                address2 = jtfAddress2.getText();
                district = jtfDistrict.getText();
                city = (String)jcbxCity.getSelectedItem();
                post = jtfPost.getText();
                phone = jtfPhone.getText();
                store = (String)jcbxStore.getSelectedItem();
                active = (String)jcbxActive.getSelectedItem();
            }
        }
    }//GEN-LAST:event_jbtUpdateActionPerformed

    private DefaultComboBoxModel populateCities()
    {
        Database instance = Database.instance();
        
        String sql = "SELECT city FROM city";
        
        return new DefaultComboBoxModel(instance.returnArray(sql)); 
    }
    
    private DefaultComboBoxModel populateStores()
    {
        Database instance = Database.instance();
        
        String sql = "SELECT store_id FROM store";
        
        return new DefaultComboBoxModel(instance.returnArray(sql)); 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbtUpdate;
    private javax.swing.JComboBox<String> jcbxActive;
    private javax.swing.JComboBox<String> jcbxCity;
    private javax.swing.JComboBox<String> jcbxStore;
    private javax.swing.JLabel jlblActive;
    private javax.swing.JLabel jlblAddress;
    private javax.swing.JLabel jlblAddress2;
    private javax.swing.JLabel jlblCity;
    private javax.swing.JLabel jlblDistrict;
    private javax.swing.JLabel jlblEmail;
    private javax.swing.JLabel jlblName;
    private javax.swing.JLabel jlblPhone;
    private javax.swing.JLabel jlblPost;
    private javax.swing.JLabel jlblStore;
    private javax.swing.JLabel jlblSurname;
    private javax.swing.JLabel jlblTitle;
    private javax.swing.JTextField jtfAddress;
    private javax.swing.JTextField jtfAddress2;
    private javax.swing.JTextField jtfDistrict;
    private javax.swing.JTextField jtfEmail;
    private javax.swing.JTextField jtfName;
    private javax.swing.JTextField jtfPhone;
    private javax.swing.JTextField jtfPost;
    private javax.swing.JTextField jtfSurname;
    // End of variables declaration//GEN-END:variables
}
